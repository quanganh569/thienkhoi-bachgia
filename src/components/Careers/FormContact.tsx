import axios from 'axios';
import { useEffect, useState } from 'react';
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

const FormContact = () => {
  const [formData, setFormData] = useState({
    name: '',
    year: '',
    cccd: '',
    phone: '',
    note: '',
  });

  const [message, setMessage] = useState('');
  const [errors, setErrors] = useState<{ [key: string]: string }>({});
  const [isDisabled, setIsDisabled] = useState(true);

  const validateForm = () => {
    let newErrors: { [key: string]: string } = {};
    const currentYear = new Date().getFullYear();

    if (!formData.name.trim()) newErrors.name = 'Vui l√≤ng nh·∫≠p h·ªç v√† t√™n.';
    if (
      !/^\d{4}$/.test(formData.year) ||
      +formData.year < 1950 ||
      +formData.year > currentYear
    ) {
      newErrors.year = `NƒÉm sinh ph·∫£i l√† s·ªë t·ª´ 1950 ƒë·∫øn ${currentYear}.`;
    }
    if (!/^\d{4}$/.test(formData.cccd))
      newErrors.cccd = 'CCCD ph·∫£i l√† 4 ch·ªØ s·ªë cu·ªëi.';
    if (!/^0\d{9}$/.test(formData.phone))
      newErrors.phone = 'S·ªë ƒëi·ªán tho·∫°i ph·∫£i c√≥ 10 ch·ªØ s·ªë h·ª£p l·ªá.';

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  useEffect(() => {
    setIsDisabled(!validateForm());
  }, [formData]);

  const handleChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!validateForm()) return;

    setMessage('ƒêang g·ª≠i...');
    setIsDisabled(true);

    try {
      const response = await axios.post('/api/submit', formData, {
        headers: { 'Content-Type': 'application/json' },
      });

      setMessage(response.data.message);
      setFormData({ name: '', year: '', cccd: '', phone: '', note: '' });
      setErrors({});
      toast.success('üéâ G·ª≠i ƒë∆°n th√†nh c√¥ng!', {
        position: 'top-right',
        autoClose: 3000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
        theme: 'colored',
      });
    } catch (error) {
      setMessage('C√≥ l·ªói x·∫£y ra! Vui l√≤ng th·ª≠ l·∫°i.');
      toast.error('‚ùå G·ª≠i ƒë∆°n th·∫•t b·∫°i!', {
        position: 'top-right',
        autoClose: 3000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
        theme: 'colored',
      });
    } finally {
      setIsDisabled(false);
    }
  };

  return (
    <section className="contact-details">
      <div className="container">
        <div className="row">
          <div className="col-xl-4 col-lg-6">
            <div className="contact-details__right">
              <div className="sec-title">
                <span className="sub-title">Tuy·ªÉn d·ª•ng</span>
                <h3 style={{ color: 'red', fontWeight: 'bold' }}>
                  ·ª®NG TUY·ªÇN NGAY
                </h3>
                <div className="text">
                  <h4 className="title">Thu nh·∫≠p ~ 50tr/giao d·ªãch</h4>
                  <br />
                  Kh√¥ng y√™u c·∫ßu kinh nghi·ªám, kh√¥ng qu·∫£n l√Ω th·ªùi gian, ƒë·ªãa ƒëi·ªÉm
                  l√†m vi·ªác, ƒë∆∞·ª£c ƒë√†o t·∫°o mi·ªÖn ph√≠, h·ªó tr·ª£ c·∫ßm tay ch·ªâ vi·ªác t·∫°i
                  khu v·ª±c, ƒë∆∞·ª£c cung c·∫•p 500 k√™nh t√¨m ki·∫øm kh√°ch h√†ng mi·ªÖn ph√≠
                  ƒë·ªôc quy·ªÅn.
                </div>
              </div>
            </div>
          </div>
          <div className="col-xl-7 offset-xl-1 col-lg-6">
            <form onSubmit={handleSubmit}>
              <div className="row">
                <div className="col-sm-6">
                  <div className="mb-3">
                    <span>H·ªç v√† t√™n</span>
                    <input
                      name="name"
                      className="form-control"
                      type="text"
                      placeholder="Nh·∫≠p h·ªç v√† t√™n"
                      value={formData.name}
                      onChange={handleChange}
                      required
                    />
                    {errors.name && (
                      <p style={{ color: 'red' }}>{errors.name}</p>
                    )}
                  </div>
                </div>
                <div className="col-sm-6">
                  <div className="mb-3">
                    <span>NƒÉm sinh</span>
                    <input
                      name="year"
                      className="form-control"
                      type="text"
                      placeholder="Nh·∫≠p nƒÉm sinh"
                      value={formData.year}
                      onChange={handleChange}
                      required
                    />
                    {errors.year && (
                      <p style={{ color: 'red' }}>{errors.year}</p>
                    )}
                  </div>
                </div>
              </div>
              <div className="row">
                <div className="col-sm-6">
                  <div className="mb-3">
                    <span>CƒÉn c∆∞·ªõc c√¥ng d√¢n</span>
                    <input
                      name="cccd"
                      className="form-control"
                      type="text"
                      placeholder="4 s·ªë cu·ªëi cƒÉn c∆∞·ªõc c√¥ng d√¢n"
                      value={formData.cccd}
                      onChange={handleChange}
                      required
                    />
                    {errors.cccd && (
                      <p style={{ color: 'red' }}>{errors.cccd}</p>
                    )}
                  </div>
                </div>
                <div className="col-sm-6">
                  <div className="mb-3">
                    <span>S·ªë ƒëi·ªán tho·∫°i</span>
                    <input
                      name="phone"
                      className="form-control"
                      type="text"
                      placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
                      value={formData.phone}
                      onChange={handleChange}
                      required
                    />
                    {errors.phone && (
                      <p style={{ color: 'red' }}>{errors.phone}</p>
                    )}
                  </div>
                </div>
              </div>
              <div className="mb-3">
                <span>L·ªùi nh·∫Øn</span>
                <textarea
                  name="note"
                  className="form-control"
                  rows={5}
                  placeholder="Nh·∫≠p l·ªùi nh·∫Øn"
                  value={formData.note}
                  onChange={handleChange}
                />
              </div>
              <div className="mb-3">
                <button
                  type="submit"
                  className="theme-btn btn-style-one"
                  disabled={isDisabled}
                >
                  <span className="btn-title">
                    {isDisabled
                      ? 'Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin'
                      : 'N·ªôp ƒë∆°n ·ª©ng tuy·ªÉn'}
                  </span>
                </button>
              </div>
            </form>
            {message && <p className="mt-4 text-green-600">{message}</p>}
          </div>
        </div>
      </div>

      {/* Toast container ƒë·ªÉ hi·ªÉn th·ªã th√¥ng b√°o */}
      <ToastContainer position="top-right" autoClose={3000} />
    </section>
  );
};

export default FormContact;
